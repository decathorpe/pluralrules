# ! [ allow ( unused_variables , unused_parens ) ] # ! [ cfg_attr ( feature = "cargo-clippy" , allow ( clippy :: float_cmp ) ) ] # ! [ cfg_attr ( feature = "cargo-clippy" , allow ( clippy :: unreadable_literal ) ) ] # ! [ cfg_attr ( feature = "cargo-clippy" , allow ( clippy :: nonminimal_bool ) ) ] use matches :: matches ; use phf ; use super :: operands :: PluralOperands ; use super :: { PluralCategory , PluralRuleType } ; pub type PluralRule = fn ( & PluralOperands ) -> PluralCategory ; pub static CLDR_VERSION : usize = 33 ; # [ cfg_attr ( tarpaulin , skip ) ] pub fn get_locales ( pr_type : PluralRuleType ) -> & 'static [ & 'static str ] { match pr_type { PluralRuleType :: CARDINAL => & [ "af" , "ak" , "am" , "ar" , "ars" , "as" , "asa" , "ast" , "az" , "be" , "bem" , "bez" , "bg" , "bh" , "bm" , "bn" , "bo" , "br" , "brx" , "bs" , "ca" , "ce" , "cgg" , "chr" , "ckb" , "cs" , "cy" , "da" , "de" , "dsb" , "dv" , "dz" , "ee" , "el" , "en" , "eo" , "es" , "et" , "eu" , "fa" , "ff" , "fi" , "fil" , "fo" , "fr" , "fur" , "fy" , "ga" , "gd" , "gl" , "gsw" , "gu" , "guw" , "gv" , "ha" , "haw" , "he" , "hi" , "hr" , "hsb" , "hu" , "hy" , "id" , "ig" , "ii" , "in" , "io" , "is" , "it" , "iu" , "iw" , "ja" , "jbo" , "jgo" , "ji" , "jmc" , "jv" , "jw" , "ka" , "kab" , "kaj" , "kcg" , "kde" , "kea" , "kk" , "kkj" , "kl" , "km" , "kn" , "ko" , "ks" , "ksb" , "ksh" , "ku" , "kw" , "ky" , "lag" , "lb" , "lg" , "lkt" , "ln" , "lo" , "lt" , "lv" , "mas" , "mg" , "mgo" , "mk" , "ml" , "mn" , "mo" , "mr" , "ms" , "mt" , "my" , "nah" , "naq" , "nb" , "nd" , "ne" , "nl" , "nn" , "nnh" , "no" , "nqo" , "nr" , "nso" , "ny" , "nyn" , "om" , "or" , "os" , "pa" , "pap" , "pl" , "prg" , "ps" , "pt" , "pt-PT" , "rm" , "ro" , "rof" , "root" , "ru" , "rwk" , "sah" , "saq" , "scn" , "sd" , "sdh" , "se" , "seh" , "ses" , "sg" , "sh" , "shi" , "si" , "sk" , "sl" , "sma" , "smi" , "smj" , "smn" , "sms" , "sn" , "so" , "sq" , "sr" , "ss" , "ssy" , "st" , "sv" , "sw" , "syr" , "ta" , "te" , "teo" , "th" , "ti" , "tig" , "tk" , "tl" , "tn" , "to" , "tr" , "ts" , "tzm" , "ug" , "uk" , "ur" , "uz" , "ve" , "vi" , "vo" , "vun" , "wa" , "wae" , "wo" , "xh" , "xog" , "yi" , "yo" , "yue" , "zh" , "zu" ] , PluralRuleType :: ORDINAL => & [ "af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "ce" , "cs" , "cy" , "da" , "de" , "dsb" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "fy" , "ga" , "gl" , "gsw" , "gu" , "he" , "hi" , "hr" , "hsb" , "hu" , "hy" , "id" , "in" , "is" , "it" , "iw" , "ja" , "ka" , "kk" , "km" , "kn" , "ko" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mo" , "mr" , "ms" , "my" , "nb" , "ne" , "nl" , "or" , "pa" , "pl" , "prg" , "ps" , "pt" , "ro" , "root" , "ru" , "scn" , "sd" , "sh" , "si" , "sk" , "sl" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tl" , "tr" , "uk" , "ur" , "uz" , "vi" , "yue" , "zh" , "zu" ] } } # [ cfg_attr ( tarpaulin , skip ) ] pub fn get_pr ( lang_code : & str , pr_type : PluralRuleType ) -> Result < PluralRule , ( ) > { match pr_type { PluralRuleType :: CARDINAL => { static LANGUAGES : phf :: Map < & 'static str , PluralRule > = :: phf :: Map { key : 3213172566270843353 , disps : :: phf :: Slice :: Static ( & [ ( 0 , 61 ) , ( 0 , 1 ) , ( 1 , 1 ) , ( 0 , 9 ) , ( 0 , 61 ) , ( 0 , 0 ) , ( 0 , 32 ) , ( 0 , 94 ) , ( 0 , 1 ) , ( 2 , 148 ) , ( 2 , 33 ) , ( 0 , 0 ) , ( 0 , 1 ) , ( 0 , 20 ) , ( 0 , 65 ) , ( 0 , 61 ) , ( 0 , 111 ) , ( 0 , 21 ) , ( 0 , 136 ) , ( 2 , 1 ) , ( 0 , 179 ) , ( 1 , 186 ) , ( 0 , 5 ) , ( 0 , 6 ) , ( 0 , 38 ) , ( 0 , 178 ) , ( 31 , 175 ) , ( 81 , 89 ) , ( 15 , 161 ) , ( 1 , 194 ) , ( 6 , 96 ) , ( 0 , 3 ) , ( 3 , 83 ) , ( 1 , 46 ) , ( 42 , 84 ) , ( 0 , 112 ) , ( 0 , 47 ) , ( 0 , 14 ) , ( 0 , 17 ) , ( 19 , 110 ) , ( 0 , 1 ) , ] ) , entries : :: phf :: Slice :: Static ( & [ ( "bg" , { fn rule_bg ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bg } ) , ( "kea" , { fn rule_kea ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_kea } ) , ( "kde" , { fn rule_kde ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_kde } ) , ( "ur" , { fn rule_ur ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ur } ) , ( "kcg" , { fn rule_kcg ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kcg } ) , ( "ug" , { fn rule_ug ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ug } ) , ( "nyn" , { fn rule_nyn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nyn } ) , ( "os" , { fn rule_os ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_os } ) , ( "guw" , { fn rule_guw ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_guw } ) , ( "hr" , { fn rule_hr ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) || ( matches ! ( po . f % 10 , 2 ..= 4 ) && ! matches ! ( po . f % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . f % 10 == 1 && po . f % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hr } ) , ( "gu" , { fn rule_gu ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_gu } ) , ( "km" , { fn rule_km ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_km } ) , ( "ses" , { fn rule_ses ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ses } ) , ( "fr" , { fn rule_fr ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i == 0 || po . i == 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fr } ) , ( "mas" , { fn rule_mas ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mas } ) , ( "bn" , { fn rule_bn ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bn } ) , ( "pap" , { fn rule_pap ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_pap } ) , ( "lv" , { fn rule_lv ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . v == 2 && po . f % 10 == 1 && po . f % 100 != 11 ) || ( po . v != 2 && po . f % 10 == 1 ) { PluralCategory :: ONE } else if ( po . i % 10 == 0 ) || ( matches ! ( po . i , 11 ..= 19 ) ) || ( po . v == 2 && matches ! ( po . f % 100 , 11 ..= 19 ) ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_lv } ) , ( "mk" , { fn rule_mk ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . f % 10 == 1 && po . f % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mk } ) , ( "ar" , { fn rule_ar ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 3 ..= 10 ) ) { PluralCategory :: FEW } else if ( matches ! ( po . i , 11 ..= 99 ) ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else if ( po . n == 0 . 0 ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_ar } ) , ( "no" , { fn rule_no ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_no } ) , ( "asa" , { fn rule_asa ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_asa } ) , ( "nl" , { fn rule_nl ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nl } ) , ( "de" , { fn rule_de ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_de } ) , ( "dsb" , { fn rule_dsb ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 100 , 3 ..= 4 ) ) || ( matches ! ( po . f % 100 , 3 ..= 4 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 100 == 1 ) || ( po . f % 100 == 1 ) { PluralCategory :: ONE } else if ( po . v == 0 && po . i % 100 == 2 ) || ( po . f % 100 == 2 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_dsb } ) , ( "nqo" , { fn rule_nqo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_nqo } ) , ( "root" , { fn rule_root ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_root } ) , ( "lb" , { fn rule_lb ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_lb } ) , ( "am" , { fn rule_am ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_am } ) , ( "af" , { fn rule_af ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_af } ) , ( "yue" , { fn rule_yue ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_yue } ) , ( "fo" , { fn rule_fo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fo } ) , ( "sma" , { fn rule_sma ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_sma } ) , ( "seh" , { fn rule_seh ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_seh } ) , ( "ja" , { fn rule_ja ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ja } ) , ( "sk" , { fn rule_sk ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 2 ..= 4 ) && po . v == 0 ) { PluralCategory :: FEW } else if ( po . v != 0 ) { PluralCategory :: MANY } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sk } ) , ( "ml" , { fn rule_ml ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ml } ) , ( "prg" , { fn rule_prg ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . v == 2 && po . f % 10 == 1 && po . f % 100 != 11 ) || ( po . v != 2 && po . f % 10 == 1 ) { PluralCategory :: ONE } else if ( po . i % 10 == 0 ) || ( matches ! ( po . i , 11 ..= 19 ) ) || ( po . v == 2 && matches ! ( po . f % 100 , 11 ..= 19 ) ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_prg } ) , ( "vi" , { fn rule_vi ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_vi } ) , ( "to" , { fn rule_to ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_to } ) , ( "bs" , { fn rule_bs ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) || ( matches ! ( po . f % 10 , 2 ..= 4 ) && ! matches ! ( po . f % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . f % 10 == 1 && po . f % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bs } ) , ( "ars" , { fn rule_ars ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 3 ..= 10 ) ) { PluralCategory :: FEW } else if ( matches ! ( po . i , 11 ..= 99 ) ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else if ( po . n == 0 . 0 ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_ars } ) , ( "rm" , { fn rule_rm ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_rm } ) , ( "ee" , { fn rule_ee ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ee } ) , ( "smi" , { fn rule_smi ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_smi } ) , ( "ff" , { fn rule_ff ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i == 0 || po . i == 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ff } ) , ( "br" , { fn rule_br ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 9 || matches ! ( po . i , 3 ..= 4 ) ) && ! matches ! ( po . i , 10 ..= 19 ) && ! matches ! ( po . i , 70 ..= 79 ) && ! matches ! ( po . i , 90 ..= 99 ) ) { PluralCategory :: FEW } else if ( po . n != 0 . 0 && po . i % 1000000 == 0 ) { PluralCategory :: MANY } else if ( po . i % 10 == 1 && po . i % 100 != 11 && po . i % 100 != 71 && po . i % 100 != 91 ) { PluralCategory :: ONE } else if ( po . i % 10 == 2 && po . i % 100 != 12 && po . i % 100 != 72 && po . i % 100 != 92 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_br } ) , ( "bh" , { fn rule_bh ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bh } ) , ( "in" , { fn rule_in ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_in } ) , ( "ky" , { fn rule_ky ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ky } ) , ( "is" , { fn rule_is ( po : & PluralOperands ) -> PluralCategory { if ( po . t == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . t != 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_is } ) , ( "mg" , { fn rule_mg ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mg } ) , ( "yi" , { fn rule_yi ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_yi } ) , ( "nnh" , { fn rule_nnh ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nnh } ) , ( "naq" , { fn rule_naq ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_naq } ) , ( "fy" , { fn rule_fy ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fy } ) , ( "et" , { fn rule_et ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_et } ) , ( "pa" , { fn rule_pa ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_pa } ) , ( "ssy" , { fn rule_ssy ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ssy } ) , ( "id" , { fn rule_id ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_id } ) , ( "haw" , { fn rule_haw ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_haw } ) , ( "mn" , { fn rule_mn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mn } ) , ( "ru" , { fn rule_ru ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 0 ) || ( po . v == 0 && matches ! ( po . i % 10 , 5 ..= 9 ) ) || ( po . v == 0 && matches ! ( po . i % 100 , 11 ..= 14 ) ) { PluralCategory :: MANY } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ru } ) , ( "gl" , { fn rule_gl ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_gl } ) , ( "fa" , { fn rule_fa ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fa } ) , ( "ss" , { fn rule_ss ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ss } ) , ( "en" , { fn rule_en ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_en } ) , ( "scn" , { fn rule_scn ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_scn } ) , ( "om" , { fn rule_om ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_om } ) , ( "eo" , { fn rule_eo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_eo } ) , ( "mt" , { fn rule_mt ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 0 . 0 ) || ( matches ! ( po . i , 2 ..= 10 ) ) { PluralCategory :: FEW } else if ( matches ! ( po . i , 11 ..= 19 ) ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mt } ) , ( "bem" , { fn rule_bem ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bem } ) , ( "ast" , { fn rule_ast ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ast } ) , ( "tzm" , { fn rule_tzm ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) || ( matches ! ( po . i , 11 ..= 99 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tzm } ) , ( "brx" , { fn rule_brx ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_brx } ) , ( "nn" , { fn rule_nn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nn } ) , ( "gd" , { fn rule_gd ( po : & PluralOperands ) -> PluralCategory { if ( ( matches ! ( po . i , 3 ..= 10 ) && po . f == 0 || matches ! ( po . i , 13 ..= 19 ) && po . f == 0 ) ) { PluralCategory :: FEW } else if ( ( po . n == 1 . 0 || po . n == 11 . 0 ) ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 12 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_gd } ) , ( "io" , { fn rule_io ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_io } ) , ( "th" , { fn rule_th ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_th } ) , ( "vun" , { fn rule_vun ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_vun } ) , ( "sd" , { fn rule_sd ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sd } ) , ( "az" , { fn rule_az ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_az } ) , ( "ak" , { fn rule_ak ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ak } ) , ( "jgo" , { fn rule_jgo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_jgo } ) , ( "he" , { fn rule_he ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && ! matches ! ( po . i , 0 ..= 10 ) && po . f == 0 && po . i % 10 == 0 ) { PluralCategory :: MANY } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else if ( po . i == 2 && po . v == 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_he } ) , ( "tk" , { fn rule_tk ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tk } ) , ( "ka" , { fn rule_ka ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ka } ) , ( "uz" , { fn rule_uz ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_uz } ) , ( "se" , { fn rule_se ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_se } ) , ( "kl" , { fn rule_kl ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kl } ) , ( "rof" , { fn rule_rof ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_rof } ) , ( "zu" , { fn rule_zu ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_zu } ) , ( "bez" , { fn rule_bez ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_bez } ) , ( "ksh" , { fn rule_ksh ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 0 . 0 ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_ksh } ) , ( "ts" , { fn rule_ts ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ts } ) , ( "sv" , { fn rule_sv ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sv } ) , ( "ks" , { fn rule_ks ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ks } ) , ( "tig" , { fn rule_tig ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tig } ) , ( "lkt" , { fn rule_lkt ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_lkt } ) , ( "nb" , { fn rule_nb ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nb } ) , ( "sah" , { fn rule_sah ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sah } ) , ( "teo" , { fn rule_teo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_teo } ) , ( "sl" , { fn rule_sl ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 100 , 3 ..= 4 ) ) || ( po . v != 0 ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 100 == 1 ) { PluralCategory :: ONE } else if ( po . v == 0 && po . i % 100 == 2 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_sl } ) , ( "ms" , { fn rule_ms ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ms } ) , ( "mgo" , { fn rule_mgo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mgo } ) , ( "sn" , { fn rule_sn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sn } ) , ( "ii" , { fn rule_ii ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ii } ) , ( "dz" , { fn rule_dz ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_dz } ) , ( "sw" , { fn rule_sw ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sw } ) , ( "saq" , { fn rule_saq ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_saq } ) , ( "kw" , { fn rule_kw ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_kw } ) , ( "ro" , { fn rule_ro ( po : & PluralOperands ) -> PluralCategory { if ( po . v != 0 ) || ( po . n == 0 . 0 ) || ( po . n != 1 . 0 && matches ! ( po . i , 1 ..= 19 ) ) { PluralCategory :: FEW } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ro } ) , ( "tl" , { fn rule_tl ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && ( po . i == 1 || po . i == 2 || po . i == 3 ) ) || ( po . v == 0 && po . i % 10 != 4 && po . i % 10 != 6 && po . i % 10 != 9 ) || ( po . v != 0 && po . f % 10 != 4 && po . f % 10 != 6 && po . f % 10 != 9 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tl } ) , ( "fil" , { fn rule_fil ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && ( po . i == 1 || po . i == 2 || po . i == 3 ) ) || ( po . v == 0 && po . i % 10 != 4 && po . i % 10 != 6 && po . i % 10 != 9 ) || ( po . v != 0 && po . f % 10 != 4 && po . f % 10 != 6 && po . f % 10 != 9 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fil } ) , ( "it" , { fn rule_it ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_it } ) , ( "wa" , { fn rule_wa ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_wa } ) , ( "sms" , { fn rule_sms ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_sms } ) , ( "lg" , { fn rule_lg ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_lg } ) , ( "xh" , { fn rule_xh ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_xh } ) , ( "hu" , { fn rule_hu ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hu } ) , ( "my" , { fn rule_my ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_my } ) , ( "kn" , { fn rule_kn ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kn } ) , ( "pt-PT" , { fn rule_pt_pt ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_pt_pt } ) , ( "sh" , { fn rule_sh ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) || ( matches ! ( po . f % 10 , 2 ..= 4 ) && ! matches ! ( po . f % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . f % 10 == 1 && po . f % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sh } ) , ( "ksb" , { fn rule_ksb ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ksb } ) , ( "smn" , { fn rule_smn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_smn } ) , ( "kk" , { fn rule_kk ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kk } ) , ( "da" , { fn rule_da ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) || ( po . t != 0 && ( po . i == 0 || po . i == 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_da } ) , ( "pl" , { fn rule_pl ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i != 1 && matches ! ( po . i % 10 , 0 ..= 1 ) ) || ( po . v == 0 && matches ! ( po . i % 10 , 5 ..= 9 ) ) || ( po . v == 0 && matches ! ( po . i % 100 , 12 ..= 14 ) ) { PluralCategory :: MANY } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_pl } ) , ( "mr" , { fn rule_mr ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mr } ) , ( "ce" , { fn rule_ce ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ce } ) , ( "jw" , { fn rule_jw ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_jw } ) , ( "mo" , { fn rule_mo ( po : & PluralOperands ) -> PluralCategory { if ( po . v != 0 ) || ( po . n == 0 . 0 ) || ( po . n != 1 . 0 && matches ! ( po . i , 1 ..= 19 ) ) { PluralCategory :: FEW } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mo } ) , ( "syr" , { fn rule_syr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_syr } ) , ( "wae" , { fn rule_wae ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_wae } ) , ( "lo" , { fn rule_lo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_lo } ) , ( "ko" , { fn rule_ko ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ko } ) , ( "shi" , { fn rule_shi ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 2 ..= 10 ) && po . f == 0 ) { PluralCategory :: FEW } else if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_shi } ) , ( "ps" , { fn rule_ps ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ps } ) , ( "ta" , { fn rule_ta ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ta } ) , ( "uk" , { fn rule_uk ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 0 ) || ( po . v == 0 && matches ! ( po . i % 10 , 5 ..= 9 ) ) || ( po . v == 0 && matches ! ( po . i % 100 , 11 ..= 14 ) ) { PluralCategory :: MANY } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_uk } ) , ( "ti" , { fn rule_ti ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ti } ) , ( "kab" , { fn rule_kab ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i == 0 || po . i == 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kab } ) , ( "nah" , { fn rule_nah ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nah } ) , ( "nr" , { fn rule_nr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nr } ) , ( "be" , { fn rule_be ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 2 ..= 4 ) && ! matches ! ( po . i , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . i % 10 == 0 ) || ( matches ! ( po . i , 5 ..= 9 ) ) || ( matches ! ( po . i , 11 ..= 14 ) ) { PluralCategory :: MANY } else if ( po . i % 10 == 1 && po . i % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_be } ) , ( "es" , { fn rule_es ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_es } ) , ( "ln" , { fn rule_ln ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ln } ) , ( "lt" , { fn rule_lt ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 2 ..= 9 ) && ! matches ! ( po . i , 11 ..= 19 ) ) { PluralCategory :: FEW } else if ( po . f != 0 ) { PluralCategory :: MANY } else if ( po . i % 10 == 1 && ! matches ! ( po . i , 11 ..= 19 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_lt } ) , ( "iw" , { fn rule_iw ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && ! matches ! ( po . i , 0 ..= 10 ) && po . f == 0 && po . i % 10 == 0 ) { PluralCategory :: MANY } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else if ( po . i == 2 && po . v == 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_iw } ) , ( "sr" , { fn rule_sr ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 10 , 2 ..= 4 ) && ! matches ! ( po . i % 100 , 12 ..= 14 ) ) || ( matches ! ( po . f % 10 , 2 ..= 4 ) && ! matches ! ( po . f % 100 , 12 ..= 14 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 10 == 1 && po . i % 100 != 11 ) || ( po . f % 10 == 1 && po . f % 100 != 11 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sr } ) , ( "si" , { fn rule_si ( po : & PluralOperands ) -> PluralCategory { if ( ( po . n == 0 . 0 || po . n == 1 . 0 ) ) || ( po . i == 0 && po . f == 1 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_si } ) , ( "jv" , { fn rule_jv ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_jv } ) , ( "ig" , { fn rule_ig ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ig } ) , ( "pt" , { fn rule_pt ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_pt } ) , ( "nso" , { fn rule_nso ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 0 ..= 1 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nso } ) , ( "jmc" , { fn rule_jmc ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_jmc } ) , ( "gv" , { fn rule_gv ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && ( po . i % 100 == 0 || po . i % 100 == 20 || po . i % 100 == 40 || po . i % 100 == 60 || po . i % 100 == 80 ) ) { PluralCategory :: FEW } else if ( po . v != 0 ) { PluralCategory :: MANY } else if ( po . v == 0 && po . i % 10 == 1 ) { PluralCategory :: ONE } else if ( po . v == 0 && po . i % 10 == 2 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_gv } ) , ( "st" , { fn rule_st ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_st } ) , ( "sdh" , { fn rule_sdh ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sdh } ) , ( "eu" , { fn rule_eu ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_eu } ) , ( "cs" , { fn rule_cs ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 2 ..= 4 ) && po . v == 0 ) { PluralCategory :: FEW } else if ( po . v != 0 ) { PluralCategory :: MANY } else if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_cs } ) , ( "tr" , { fn rule_tr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tr } ) , ( "kaj" , { fn rule_kaj ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kaj } ) , ( "yo" , { fn rule_yo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_yo } ) , ( "bm" , { fn rule_bm ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_bm } ) , ( "ny" , { fn rule_ny ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ny } ) , ( "ca" , { fn rule_ca ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ca } ) , ( "nd" , { fn rule_nd ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_nd } ) , ( "fi" , { fn rule_fi ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fi } ) , ( "ga" , { fn rule_ga ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 3 ..= 6 ) && po . f == 0 ) { PluralCategory :: FEW } else if ( matches ! ( po . i , 7 ..= 10 ) && po . f == 0 ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_ga } ) , ( "ku" , { fn rule_ku ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ku } ) , ( "iu" , { fn rule_iu ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_iu } ) , ( "hsb" , { fn rule_hsb ( po : & PluralOperands ) -> PluralCategory { if ( po . v == 0 && matches ! ( po . i % 100 , 3 ..= 4 ) ) || ( matches ! ( po . f % 100 , 3 ..= 4 ) ) { PluralCategory :: FEW } else if ( po . v == 0 && po . i % 100 == 1 ) || ( po . f % 100 == 1 ) { PluralCategory :: ONE } else if ( po . v == 0 && po . i % 100 == 2 ) || ( po . f % 100 == 2 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_hsb } ) , ( "lag" , { fn rule_lag ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i == 0 || po . i == 1 ) && po . n != 0 . 0 ) { PluralCategory :: ONE } else if ( po . n == 0 . 0 ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_lag } ) , ( "vo" , { fn rule_vo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_vo } ) , ( "gsw" , { fn rule_gsw ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_gsw } ) , ( "cgg" , { fn rule_cgg ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_cgg } ) , ( "dv" , { fn rule_dv ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_dv } ) , ( "smj" , { fn rule_smj ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_smj } ) , ( "or" , { fn rule_or ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_or } ) , ( "bo" , { fn rule_bo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_bo } ) , ( "zh" , { fn rule_zh ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_zh } ) , ( "ha" , { fn rule_ha ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ha } ) , ( "tn" , { fn rule_tn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tn } ) , ( "ne" , { fn rule_ne ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ne } ) , ( "ckb" , { fn rule_ckb ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ckb } ) , ( "xog" , { fn rule_xog ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_xog } ) , ( "as" , { fn rule_as ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_as } ) , ( "el" , { fn rule_el ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_el } ) , ( "jbo" , { fn rule_jbo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_jbo } ) , ( "cy" , { fn rule_cy ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 3 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else if ( po . n == 0 . 0 ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_cy } ) , ( "ve" , { fn rule_ve ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ve } ) , ( "kkj" , { fn rule_kkj ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_kkj } ) , ( "rwk" , { fn rule_rwk ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_rwk } ) , ( "wo" , { fn rule_wo ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_wo } ) , ( "hy" , { fn rule_hy ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i == 0 || po . i == 1 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hy } ) , ( "fur" , { fn rule_fur ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fur } ) , ( "chr" , { fn rule_chr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_chr } ) , ( "sq" , { fn rule_sq ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sq } ) , ( "ji" , { fn rule_ji ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 1 && po . v == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ji } ) , ( "te" , { fn rule_te ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_te } ) , ( "hi" , { fn rule_hi ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hi } ) , ( "so" , { fn rule_so ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_so } ) , ( "sg" , { fn rule_sg ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sg } ) , ] ) , } ; LANGUAGES . get ( lang_code ) . cloned ( ) . ok_or ( ( ) ) } , PluralRuleType :: ORDINAL => { static LANGUAGES : phf :: Map < & 'static str , PluralRule > = :: phf :: Map { key : 732231254413039614 , disps : :: phf :: Slice :: Static ( & [ ( 0 , 17 ) , ( 2 , 18 ) , ( 2 , 11 ) , ( 0 , 2 ) , ( 1 , 43 ) , ( 9 , 7 ) , ( 4 , 31 ) , ( 18 , 80 ) , ( 2 , 79 ) , ( 0 , 13 ) , ( 0 , 0 ) , ( 2 , 5 ) , ( 26 , 8 ) , ( 1 , 0 ) , ( 37 , 52 ) , ( 0 , 2 ) , ( 0 , 53 ) , ( 13 , 52 ) , ( 0 , 0 ) , ] ) , entries : :: phf :: Slice :: Static ( & [ ( "tk" , { fn rule_tk ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 6 || po . i % 10 == 9 ) ) || ( po . n == 10 . 0 ) { PluralCategory :: FEW } else { PluralCategory :: OTHER } } ; rule_tk } ) , ( "tr" , { fn rule_tr ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_tr } ) , ( "hi" , { fn rule_hi ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_hi } ) , ( "nb" , { fn rule_nb ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_nb } ) , ( "ro" , { fn rule_ro ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ro } ) , ( "es" , { fn rule_es ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_es } ) , ( "ru" , { fn rule_ru ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ru } ) , ( "prg" , { fn rule_prg ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_prg } ) , ( "ur" , { fn rule_ur ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ur } ) , ( "pa" , { fn rule_pa ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_pa } ) , ( "scn" , { fn rule_scn ( po : & PluralOperands ) -> PluralCategory { if ( ( po . n == 11 . 0 || po . n == 8 . 0 || po . n == 80 . 0 || po . n == 800 . 0 ) ) { PluralCategory :: MANY } else { PluralCategory :: OTHER } } ; rule_scn } ) , ( "hr" , { fn rule_hr ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_hr } ) , ( "as" , { fn rule_as ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( ( po . n == 1 . 0 || po . n == 5 . 0 || po . n == 7 . 0 || po . n == 8 . 0 || po . n == 9 . 0 || po . n == 10 . 0 ) ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_as } ) , ( "sw" , { fn rule_sw ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sw } ) , ( "gu" , { fn rule_gu ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_gu } ) , ( "el" , { fn rule_el ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_el } ) , ( "si" , { fn rule_si ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_si } ) , ( "lv" , { fn rule_lv ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_lv } ) , ( "sl" , { fn rule_sl ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sl } ) , ( "mo" , { fn rule_mo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_mo } ) , ( "mk" , { fn rule_mk ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 7 || po . i % 10 == 8 ) && po . i % 100 != 17 && po . i % 100 != 18 ) { PluralCategory :: MANY } else if ( po . i % 10 == 1 && po . i % 100 != 11 ) { PluralCategory :: ONE } else if ( po . i % 10 == 2 && po . i % 100 != 12 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_mk } ) , ( "ne" , { fn rule_ne ( po : & PluralOperands ) -> PluralCategory { if ( matches ! ( po . i , 1 ..= 4 ) && po . f == 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ne } ) , ( "root" , { fn rule_root ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_root } ) , ( "sv" , { fn rule_sv ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 1 || po . i % 10 == 2 ) && po . i % 100 != 11 && po . i % 100 != 12 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sv } ) , ( "lo" , { fn rule_lo ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_lo } ) , ( "kn" , { fn rule_kn ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_kn } ) , ( "am" , { fn rule_am ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_am } ) , ( "ar" , { fn rule_ar ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ar } ) , ( "gl" , { fn rule_gl ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_gl } ) , ( "ps" , { fn rule_ps ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ps } ) , ( "uk" , { fn rule_uk ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 3 && po . i % 100 != 13 ) { PluralCategory :: FEW } else { PluralCategory :: OTHER } } ; rule_uk } ) , ( "cy" , { fn rule_cy ( po : & PluralOperands ) -> PluralCategory { if ( ( po . n == 3 . 0 || po . n == 4 . 0 ) ) { PluralCategory :: FEW } else if ( ( po . n == 5 . 0 || po . n == 6 . 0 ) ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else if ( ( po . n == 0 . 0 || po . n == 7 . 0 || po . n == 8 . 0 || po . n == 9 . 0 ) ) { PluralCategory :: ZERO } else { PluralCategory :: OTHER } } ; rule_cy } ) , ( "da" , { fn rule_da ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_da } ) , ( "lt" , { fn rule_lt ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_lt } ) , ( "ml" , { fn rule_ml ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ml } ) , ( "hsb" , { fn rule_hsb ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_hsb } ) , ( "in" , { fn rule_in ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_in } ) , ( "mn" , { fn rule_mn ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_mn } ) , ( "fy" , { fn rule_fy ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_fy } ) , ( "sd" , { fn rule_sd ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sd } ) , ( "th" , { fn rule_th ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_th } ) , ( "bn" , { fn rule_bn ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( ( po . n == 1 . 0 || po . n == 5 . 0 || po . n == 7 . 0 || po . n == 8 . 0 || po . n == 9 . 0 || po . n == 10 . 0 ) ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_bn } ) , ( "sh" , { fn rule_sh ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sh } ) , ( "et" , { fn rule_et ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_et } ) , ( "yue" , { fn rule_yue ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_yue } ) , ( "bg" , { fn rule_bg ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_bg } ) , ( "mr" , { fn rule_mr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_mr } ) , ( "sr" , { fn rule_sr ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sr } ) , ( "hu" , { fn rule_hu ( po : & PluralOperands ) -> PluralCategory { if ( ( po . n == 1 . 0 || po . n == 5 . 0 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hu } ) , ( "en" , { fn rule_en ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 3 && po . i % 100 != 13 ) { PluralCategory :: FEW } else if ( po . i % 10 == 1 && po . i % 100 != 11 ) { PluralCategory :: ONE } else if ( po . i % 10 == 2 && po . i % 100 != 12 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_en } ) , ( "ja" , { fn rule_ja ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ja } ) , ( "or" , { fn rule_or ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( po . n == 6 . 0 ) { PluralCategory :: MANY } else if ( ( po . n == 1 . 0 || po . n == 5 . 0 || matches ! ( po . i , 7 ..= 9 ) && po . f == 0 ) ) { PluralCategory :: ONE } else if ( ( po . n == 2 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_or } ) , ( "ca" , { fn rule_ca ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 4 . 0 ) { PluralCategory :: FEW } else if ( ( po . n == 1 . 0 || po . n == 3 . 0 ) ) { PluralCategory :: ONE } else if ( po . n == 2 . 0 ) { PluralCategory :: TWO } else { PluralCategory :: OTHER } } ; rule_ca } ) , ( "ko" , { fn rule_ko ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ko } ) , ( "sk" , { fn rule_sk ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_sk } ) , ( "bs" , { fn rule_bs ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_bs } ) , ( "pt" , { fn rule_pt ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_pt } ) , ( "vi" , { fn rule_vi ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_vi } ) , ( "ce" , { fn rule_ce ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ce } ) , ( "ta" , { fn rule_ta ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ta } ) , ( "it" , { fn rule_it ( po : & PluralOperands ) -> PluralCategory { if ( ( po . n == 11 . 0 || po . n == 8 . 0 || po . n == 80 . 0 || po . n == 800 . 0 ) ) { PluralCategory :: MANY } else { PluralCategory :: OTHER } } ; rule_it } ) , ( "fr" , { fn rule_fr ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fr } ) , ( "gsw" , { fn rule_gsw ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_gsw } ) , ( "tl" , { fn rule_tl ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_tl } ) , ( "iw" , { fn rule_iw ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_iw } ) , ( "sq" , { fn rule_sq ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 4 && po . i % 100 != 14 ) { PluralCategory :: MANY } else if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_sq } ) , ( "km" , { fn rule_km ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_km } ) , ( "fi" , { fn rule_fi ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_fi } ) , ( "zh" , { fn rule_zh ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_zh } ) , ( "id" , { fn rule_id ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_id } ) , ( "he" , { fn rule_he ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_he } ) , ( "te" , { fn rule_te ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_te } ) , ( "de" , { fn rule_de ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_de } ) , ( "nl" , { fn rule_nl ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_nl } ) , ( "ga" , { fn rule_ga ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ga } ) , ( "be" , { fn rule_be ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 2 || po . i % 10 == 3 ) && po . i % 100 != 12 && po . i % 100 != 13 ) { PluralCategory :: FEW } else { PluralCategory :: OTHER } } ; rule_be } ) , ( "pl" , { fn rule_pl ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_pl } ) , ( "fil" , { fn rule_fil ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_fil } ) , ( "uz" , { fn rule_uz ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_uz } ) , ( "af" , { fn rule_af ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_af } ) , ( "is" , { fn rule_is ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_is } ) , ( "dsb" , { fn rule_dsb ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_dsb } ) , ( "ka" , { fn rule_ka ( po : & PluralOperands ) -> PluralCategory { if ( po . i == 0 ) || ( ( po . i % 100 == 40 || po . i % 100 == 60 || po . i % 100 == 80 || matches ! ( po . i % 100 , 2 ..= 20 ) ) ) { PluralCategory :: MANY } else if ( po . i == 1 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ka } ) , ( "my" , { fn rule_my ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_my } ) , ( "az" , { fn rule_az ( po : & PluralOperands ) -> PluralCategory { if ( ( po . i % 10 == 3 || po . i % 10 == 4 ) ) || ( ( po . i % 1000 == 100 || po . i % 1000 == 200 || po . i % 1000 == 300 || po . i % 1000 == 400 || po . i % 1000 == 500 || po . i % 1000 == 600 || po . i % 1000 == 700 || po . i % 1000 == 800 || po . i % 1000 == 900 ) ) { PluralCategory :: FEW } else if ( po . i == 0 ) || ( po . i % 10 == 6 ) || ( ( po . i % 100 == 40 || po . i % 100 == 60 || po . i % 100 == 90 ) ) { PluralCategory :: MANY } else if ( ( po . i % 10 == 1 || po . i % 10 == 2 || po . i % 10 == 5 || po . i % 10 == 7 || po . i % 10 == 8 ) ) || ( ( po . i % 100 == 20 || po . i % 100 == 50 || po . i % 100 == 70 || po . i % 100 == 80 ) ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_az } ) , ( "fa" , { fn rule_fa ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_fa } ) , ( "ky" , { fn rule_ky ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_ky } ) , ( "kk" , { fn rule_kk ( po : & PluralOperands ) -> PluralCategory { if ( po . i % 10 == 6 ) || ( po . i % 10 == 9 ) || ( po . i % 10 == 0 && po . n != 0 . 0 ) { PluralCategory :: MANY } else { PluralCategory :: OTHER } } ; rule_kk } ) , ( "cs" , { fn rule_cs ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_cs } ) , ( "zu" , { fn rule_zu ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_zu } ) , ( "ms" , { fn rule_ms ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_ms } ) , ( "hy" , { fn rule_hy ( po : & PluralOperands ) -> PluralCategory { if ( po . n == 1 . 0 ) { PluralCategory :: ONE } else { PluralCategory :: OTHER } } ; rule_hy } ) , ( "eu" , { fn rule_eu ( po : & PluralOperands ) -> PluralCategory { { PluralCategory :: OTHER } } ; rule_eu } ) , ] ) , } ; LANGUAGES . get ( lang_code ) . cloned ( ) . ok_or ( ( ) ) } } }